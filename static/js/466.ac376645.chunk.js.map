{"version":3,"file":"static/js/466.ac376645.chunk.js","mappings":"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","sources":["apps/compatibilidadDeNombres.js"],"sourcesContent":["// description: Calcula la compatibilidad entre dos nombres\n// categories: Entretenimiento, Social, Amor\nimport React, { useState } from \"react\";\n\nconst CalculadoraCompatibilidad = () => {\n  const [nombre1, setNombre1] = useState(\"\");\n  const [nombre2, setNombre2] = useState(\"\");\n  const [resultado, setResultado] = useState(\"\");\n  const [compatibilidad, setCompatibilidad] = useState(\"\");\n  const [explicacion, setExplicacion] = useState([]);\n  const [pasos, setPasos] = useState([]);\n\n  const calcularCompatibilidad = () => {\n    // Verificar que ambos nombres estén ingresados\n    if (!nombre1 || !nombre2) {\n      setResultado(\"Por favor ingresa ambos nombres\");\n      setExplicacion([]);\n      setPasos([]);\n      setCompatibilidad(\"\");\n      return;\n    }\n\n    // Convertir nombres a minúsculas para consistencia\n    const n1 = nombre1.toLowerCase();\n    const n2 = nombre2.toLowerCase();\n\n    // Combinar ambos nombres\n    const nombresCombinados = n1 + n2;\n\n    // Para llevar el registro de letras ya contadas\n    const letrasContadas = new Set();\n\n    let numeroResultado = \"\";\n    let explicacionDetallada = [];\n\n    // Procesar el primer nombre\n    for (let i = 0; i < n1.length; i++) {\n      const letra = n1[i];\n\n      // Si ya contamos esta letra, la saltamos\n      if (letrasContadas.has(letra)) continue;\n\n      // Marcar esta letra como contada\n      letrasContadas.add(letra);\n\n      // Contar todas las ocurrencias de esta letra en ambos nombres\n      let conteo = 0;\n      for (let j = 0; j < nombresCombinados.length; j++) {\n        if (nombresCombinados[j] === letra) {\n          conteo++;\n        }\n      }\n\n      // Añadir el conteo al resultado\n      numeroResultado += conteo;\n      explicacionDetallada.push({\n        letra: letra,\n        conteo: conteo,\n      });\n    }\n\n    // Procesar el segundo nombre\n    for (let i = 0; i < n2.length; i++) {\n      const letra = n2[i];\n\n      // Si ya contamos esta letra, la saltamos\n      if (letrasContadas.has(letra)) continue;\n\n      // Marcar esta letra como contada\n      letrasContadas.add(letra);\n\n      // Contar todas las ocurrencias de esta letra en ambos nombres\n      let conteo = 0;\n      for (let j = 0; j < nombresCombinados.length; j++) {\n        if (nombresCombinados[j] === letra) {\n          conteo++;\n        }\n      }\n\n      // Añadir el conteo al resultado\n      numeroResultado += conteo;\n      explicacionDetallada.push({\n        letra: letra,\n        conteo: conteo,\n      });\n    }\n\n    setResultado(numeroResultado);\n    setExplicacion(explicacionDetallada);\n\n    // Realizar la suma de extremos hasta tener un número de 2 dígitos\n    let pasosSuma = [];\n    let numActual = numeroResultado;\n\n    pasosSuma.push({\n      numero: numActual,\n      descripcion: \"Número inicial obtenido de contar letras\",\n    });\n\n    while (numActual.length > 2) {\n      let nuevoNum = \"\";\n      let mitad = Math.floor(numActual.length / 2);\n      let operaciones = [];\n\n      for (let i = 0; i < mitad; i++) {\n        let suma =\n          parseInt(numActual[i]) +\n          parseInt(numActual[numActual.length - 1 - i]);\n        operaciones.push(\n          `${numActual[i]} + ${numActual[numActual.length - 1 - i]} = ${suma}`\n        );\n        nuevoNum += suma;\n      }\n\n      // Si hay un dígito en el medio (longitud impar), lo mantenemos\n      if (numActual.length % 2 !== 0) {\n        nuevoNum += numActual[mitad];\n        operaciones.push(`${numActual[mitad]} (dígito central, se mantiene)`);\n      }\n\n      pasosSuma.push({\n        numero: nuevoNum,\n        operaciones: operaciones,\n      });\n\n      numActual = nuevoNum;\n    }\n\n    setPasos(pasosSuma);\n    setCompatibilidad(numActual);\n  };\n\n  // Función para probar con ejemplos\n  const probarEjemploDanielSabrina = () => {\n    setNombre1(\"Daniel\");\n    setNombre2(\"Sabrina\");\n    setTimeout(calcularCompatibilidad, 100);\n  };\n\n  const probarEjemploMariaPedro = () => {\n    setNombre1(\"María\");\n    setNombre2(\"Pedro\");\n    setTimeout(calcularCompatibilidad, 100);\n  };\n\n  return (\n    <div className=\"flex flex-col items-center p-6 max-w-md mx-auto bg-white rounded-lg shadow-md\">\n      <h1 className=\"text-2xl font-bold mb-2 text-center\">\n        Calculadora de Compatibilidad\n      </h1>\n      <p className=\"text-gray-600 mb-6 text-center\">\n        Descubre el porcentaje de compatibilidad según sus nombres\n      </p>\n\n      <div className=\"w-full mb-4\">\n        <label className=\"block text-gray-700 mb-2\">Primer Nombre:</label>\n        <input\n          type=\"text\"\n          value={nombre1}\n          onChange={(e) => setNombre1(e.target.value)}\n          className=\"w-full p-2 border border-gray-300 rounded\"\n          placeholder=\"Ingresa el primer nombre\"\n        />\n      </div>\n\n      <div className=\"w-full mb-6\">\n        <label className=\"block text-gray-700 mb-2\">Segundo Nombre:</label>\n        <input\n          type=\"text\"\n          value={nombre2}\n          onChange={(e) => setNombre2(e.target.value)}\n          className=\"w-full p-2 border border-gray-300 rounded\"\n          placeholder=\"Ingresa el segundo nombre\"\n        />\n      </div>\n\n      <div className=\"flex flex-wrap gap-2 mb-6\">\n        <button\n          onClick={calcularCompatibilidad}\n          className=\"px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700\"\n        >\n          Calcular Compatibilidad\n        </button>\n\n        <button\n          onClick={probarEjemploDanielSabrina}\n          className=\"px-4 py-2 bg-green-600 text-white rounded hover:bg-green-700\"\n        >\n          Ejemplo: Daniel y Sabrina\n        </button>\n\n        <button\n          onClick={probarEjemploMariaPedro}\n          className=\"px-4 py-2 bg-purple-600 text-white rounded hover:bg-purple-700\"\n        >\n          Ejemplo: María y Pedro\n        </button>\n      </div>\n\n      {compatibilidad && (\n        <div className=\"w-full p-4 mb-4 bg-pink-100 rounded-lg border-2 border-pink-300\">\n          <h2 className=\"text-xl font-bold text-center mb-2\">Resultado:</h2>\n          <div className=\"text-3xl font-bold text-center text-pink-600\">\n            {compatibilidad}% de compatibilidad\n          </div>\n        </div>\n      )}\n\n      {resultado && (\n        <div className=\"w-full\">\n          <div className=\"p-4 bg-gray-100 rounded mb-4\">\n            <h3 className=\"text-lg font-semibold mb-2\">\n              Paso 1: Conteo de letras\n            </h3>\n            <div className=\"text-xl font-bold mb-2\">{resultado}</div>\n\n            {explicacion.length > 0 && (\n              <div className=\"text-sm text-gray-600\">\n                <p className=\"mb-1\">Explicación:</p>\n                <ul className=\"list-disc pl-5\">\n                  {explicacion.map((item, index) => (\n                    <li key={index}>\n                      Letra \"{item.letra}\": aparece {item.conteo} veces entre\n                      ambos nombres\n                    </li>\n                  ))}\n                </ul>\n              </div>\n            )}\n          </div>\n\n          {pasos.length > 1 && (\n            <div className=\"p-4 bg-gray-100 rounded\">\n              <h3 className=\"text-lg font-semibold mb-2\">\n                Paso 2: Cálculo de compatibilidad\n              </h3>\n\n              {pasos.map((paso, index) => (\n                <div key={index} className=\"mb-4\">\n                  {index === 0 ? (\n                    <div className=\"mb-2\">\n                      <span className=\"font-medium\">Número inicial:</span>{\" \"}\n                      {paso.numero}\n                    </div>\n                  ) : (\n                    <div>\n                      <div className=\"mb-1\">\n                        <span className=\"font-medium\">Operaciones:</span>\n                      </div>\n                      <ul className=\"list-disc pl-5 mb-2\">\n                        {paso.operaciones.map((op, idx) => (\n                          <li key={idx}>{op}</li>\n                        ))}\n                      </ul>\n                      <div>\n                        <span className=\"font-medium\">Resultado:</span>{\" \"}\n                        {paso.numero}\n                      </div>\n                    </div>\n                  )}\n                </div>\n              ))}\n            </div>\n          )}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default CalculadoraCompatibilidad;\n"],"names":["CalculadoraCompatibilidad","nombre1","setNombre1","useState","nombre2","setNombre2","resultado","setResultado","compatibilidad","setCompatibilidad","explicacion","setExplicacion","pasos","setPasos","calcularCompatibilidad","n1","toLowerCase","n2","nombresCombinados","letrasContadas","Set","numeroResultado","explicacionDetallada","i","length","letra","has","add","conteo","j","push","pasosSuma","numActual","numero","descripcion","nuevoNum","mitad","Math","floor","operaciones","suma","parseInt","_jsxs","className","children","_jsx","type","value","onChange","e","target","placeholder","onClick","probarEjemploDanielSabrina","setTimeout","probarEjemploMariaPedro","map","item","index","paso","op","idx"],"sourceRoot":""}