{"version":3,"file":"static/js/756.0f15316d.chunk.js","mappings":"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","sources":["apps/Tetris.js"],"sourcesContent":["// description: El clásico juego de Tetris con controles táctiles y de teclado\n// categories: Arcade, Clásicos, Diversión\nimport React, { useEffect, useRef } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"../components/ui/card\";\n\nconst Tetris = () => {\n  const canvasRef = useRef(null);\n  const gameStateRef = useRef({\n    board: [],\n    piece: null,\n    piecePosition: { x: 0, y: 0 },\n    score: 0,\n    gameOver: false,\n    dropCounter: 0,\n    dropInterval: 1000,\n    lastTime: 0,\n  });\n\n  // Tamaño de cada celda del tablero\n  const blockSize = 20;\n\n  // Colores de las piezas\n  const colors = [\n    null,\n    \"#FF0D72\", // I\n    \"#0DC2FF\", // J\n    \"#0DFF72\", // L\n    \"#F538FF\", // O\n    \"#FF8E0D\", // S\n    \"#FFE138\", // T\n    \"#3877FF\", // Z\n  ];\n\n  // Definir las piezas de Tetris\n  const pieces = [\n    // I\n    [\n      [0, 1, 0, 0],\n      [0, 1, 0, 0],\n      [0, 1, 0, 0],\n      [0, 1, 0, 0],\n    ],\n    // J\n    [\n      [0, 2, 0],\n      [0, 2, 0],\n      [2, 2, 0],\n    ],\n    // L\n    [\n      [0, 3, 0],\n      [0, 3, 0],\n      [0, 3, 3],\n    ],\n    // O\n    [\n      [4, 4],\n      [4, 4],\n    ],\n    // S\n    [\n      [0, 5, 5],\n      [5, 5, 0],\n      [0, 0, 0],\n    ],\n    // T\n    [\n      [0, 0, 0],\n      [6, 6, 6],\n      [0, 6, 0],\n    ],\n    // Z\n    [\n      [7, 7, 0],\n      [0, 7, 7],\n      [0, 0, 0],\n    ],\n  ];\n\n  // Iniciar una nueva pieza\n  const createPiece = () => {\n    const pieceType = Math.floor(Math.random() * pieces.length);\n    return pieces[pieceType];\n  };\n\n  // Dibujar la pieza actual\n  const drawPiece = (context) => {\n    const { piece, piecePosition } = gameStateRef.current;\n    if (!piece) return;\n\n    piece.forEach((row, y) => {\n      row.forEach((value, x) => {\n        if (value !== 0) {\n          context.fillStyle = colors[value];\n          context.fillRect(\n            (piecePosition.x + x) * blockSize,\n            (piecePosition.y + y) * blockSize,\n            blockSize,\n            blockSize\n          );\n          context.strokeStyle = \"#000\";\n          context.strokeRect(\n            (piecePosition.x + x) * blockSize,\n            (piecePosition.y + y) * blockSize,\n            blockSize,\n            blockSize\n          );\n        }\n      });\n    });\n  };\n\n  // Dibujar el tablero\n  const drawBoard = (context) => {\n    const { board } = gameStateRef.current;\n    board.forEach((row, y) => {\n      row.forEach((value, x) => {\n        if (value !== 0) {\n          context.fillStyle = colors[value];\n          context.fillRect(x * blockSize, y * blockSize, blockSize, blockSize);\n          context.strokeStyle = \"#000\";\n          context.strokeRect(\n            x * blockSize,\n            y * blockSize,\n            blockSize,\n            blockSize\n          );\n        }\n      });\n    });\n  };\n\n  // Comprobar colisión\n  const checkCollision = () => {\n    const { piece, piecePosition, board } = gameStateRef.current;\n    const boardWidth = canvasRef.current.width / blockSize;\n    const boardHeight = canvasRef.current.height / blockSize;\n\n    for (let y = 0; y < piece.length; y++) {\n      for (let x = 0; x < piece[y].length; x++) {\n        if (piece[y][x] !== 0) {\n          const boardX = piecePosition.x + x;\n          const boardY = piecePosition.y + y;\n\n          if (\n            boardX < 0 ||\n            boardX >= boardWidth ||\n            boardY >= boardHeight ||\n            (boardY >= 0 && board[boardY][boardX] !== 0)\n          ) {\n            return true;\n          }\n        }\n      }\n    }\n    return false;\n  };\n\n  // Mover la pieza\n  const movePiece = (dir) => {\n    const state = gameStateRef.current;\n    state.piecePosition.x += dir;\n    if (checkCollision()) {\n      state.piecePosition.x -= dir;\n    }\n  };\n\n  // Rotar la pieza\n  const rotatePiece = () => {\n    const state = gameStateRef.current;\n    const originalPiece = state.piece;\n    const rows = state.piece.length;\n    const cols = state.piece[0].length;\n    const rotated = Array.from({ length: cols }, () => Array(rows).fill(0));\n\n    for (let y = 0; y < rows; y++) {\n      for (let x = 0; x < cols; x++) {\n        rotated[x][rows - 1 - y] = state.piece[y][x];\n      }\n    }\n\n    state.piece = rotated;\n\n    if (checkCollision()) {\n      state.piece = originalPiece;\n    }\n  };\n\n  // Descender la pieza\n  const dropPiece = () => {\n    const state = gameStateRef.current;\n    state.piecePosition.y++;\n    if (checkCollision()) {\n      state.piecePosition.y--;\n      mergePiece();\n      removeLines();\n      spawnPiece();\n    }\n  };\n\n  // Fusionar la pieza con el tablero\n  const mergePiece = () => {\n    const { piece, piecePosition, board } = gameStateRef.current;\n    piece.forEach((row, y) => {\n      row.forEach((value, x) => {\n        if (value !== 0) {\n          const boardX = piecePosition.x + x;\n          const boardY = piecePosition.y + y;\n          if (boardY >= 0) {\n            board[boardY][boardX] = value;\n          }\n        }\n      });\n    });\n  };\n\n  // Eliminar líneas completas\n  const removeLines = () => {\n    const state = gameStateRef.current;\n    const boardHeight = canvasRef.current.height / blockSize;\n    const boardWidth = canvasRef.current.width / blockSize;\n    let linesRemoved = 0;\n\n    outer: for (let y = boardHeight - 1; y >= 0; y--) {\n      for (let x = 0; x < boardWidth; x++) {\n        if (state.board[y][x] === 0) {\n          continue outer;\n        }\n      }\n\n      const row = state.board.splice(y, 1)[0].fill(0);\n      state.board.unshift(row);\n      y++;\n      linesRemoved++;\n    }\n\n    if (linesRemoved > 0) {\n      state.score += linesRemoved * 100;\n      state.dropInterval = Math.max(\n        100,\n        state.dropInterval - linesRemoved * 20\n      );\n      updateScore();\n    }\n  };\n\n  // Actualizar la puntuación\n  const updateScore = () => {\n    const scoreDisplay = document.getElementById(\"score-display\");\n    if (scoreDisplay) {\n      scoreDisplay.textContent = `Puntuación: ${gameStateRef.current.score}`;\n    }\n  };\n\n  // Generar una nueva pieza\n  const spawnPiece = () => {\n    const state = gameStateRef.current;\n    const boardWidth = canvasRef.current.width / blockSize;\n    state.piece = createPiece();\n    state.piecePosition.x =\n      Math.floor(boardWidth / 2) - Math.floor(state.piece[0].length / 2);\n    state.piecePosition.y = 0;\n\n    if (checkCollision()) {\n      state.gameOver = true;\n      const gameOverDisplay = document.getElementById(\"game-over\");\n      const finalScoreDisplay = document.getElementById(\"final-score\");\n      if (gameOverDisplay && finalScoreDisplay) {\n        finalScoreDisplay.textContent = state.score;\n        gameOverDisplay.style.display = \"block\";\n      }\n    }\n  };\n\n  // Reiniciar el juego\n  const resetGame = () => {\n    const state = gameStateRef.current;\n    const boardHeight = canvasRef.current.height / blockSize;\n    const boardWidth = canvasRef.current.width / blockSize;\n    state.board = Array.from({ length: boardHeight }, () =>\n      Array(boardWidth).fill(0)\n    );\n    state.score = 0;\n    updateScore();\n    state.dropInterval = 1000;\n    state.gameOver = false;\n    const gameOverDisplay = document.getElementById(\"game-over\");\n    if (gameOverDisplay) {\n      gameOverDisplay.style.display = \"none\";\n    }\n    spawnPiece();\n  };\n\n  // Bucle principal del juego\n  const update = (time = 0) => {\n    const state = gameStateRef.current;\n    if (!state.gameOver && canvasRef.current) {\n      const deltaTime = time - state.lastTime;\n      state.lastTime = time;\n\n      state.dropCounter += deltaTime;\n      if (state.dropCounter > state.dropInterval) {\n        dropPiece();\n        state.dropCounter = 0;\n      }\n\n      const context = canvasRef.current.getContext(\"2d\");\n      context.fillStyle = \"#000\";\n      context.fillRect(0, 0, canvasRef.current.width, canvasRef.current.height);\n      drawBoard(context);\n      drawPiece(context);\n    }\n\n    if (canvasRef.current) {\n      state.animationFrameId = requestAnimationFrame(update);\n    }\n  };\n\n  // Inicializar el juego\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    const boardHeight = canvas.height / blockSize;\n    const boardWidth = canvas.width / blockSize;\n\n    gameStateRef.current.board = Array.from({ length: boardHeight }, () =>\n      Array(boardWidth).fill(0)\n    );\n    spawnPiece();\n    update();\n\n    // Controles de teclado\n    const handleKeyDown = (e) => {\n      if (gameStateRef.current.gameOver) return;\n\n      switch (e.key) {\n        case \"ArrowLeft\":\n          movePiece(-1);\n          break;\n        case \"ArrowRight\":\n          movePiece(1);\n          break;\n        case \"ArrowDown\":\n          dropPiece();\n          break;\n        case \"ArrowUp\":\n          rotatePiece();\n          break;\n      }\n    };\n\n    window.addEventListener(\"keydown\", handleKeyDown);\n\n    // Limpiar cuando el componente se desmonte\n    return () => {\n      window.removeEventListener(\"keydown\", handleKeyDown);\n      if (gameStateRef.current.animationFrameId) {\n        cancelAnimationFrame(gameStateRef.current.animationFrameId);\n      }\n    };\n  }, []);\n\n  return (\n    <div className=\"w-full max-w-3xl mx-auto p-4\">\n      <Card className=\"mb-4\">\n        <CardHeader className=\"bg-blue-500 text-white\">\n          <CardTitle className=\"text-center text-2xl\">Tetris</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div\n            id=\"score-display\"\n            className=\"text-center text-xl font-bold mb-4\"\n          >\n            Puntuación: 0\n          </div>\n\n          <div\n            className=\"relative mx-auto border-2 border-gray-800 bg-gray-100\"\n            style={{ width: \"240px\", height: \"400px\" }}\n          >\n            <canvas\n              ref={canvasRef}\n              width={240}\n              height={400}\n              className=\"touch-none\"\n            />\n\n            <div\n              id=\"game-over\"\n              className=\"absolute inset-0 flex items-center justify-center bg-black bg-opacity-80 text-white\"\n              style={{ display: \"none\" }}\n            >\n              <div className=\"text-center p-4\">\n                <h2 className=\"text-2xl font-bold mb-2\">¡Juego Terminado!</h2>\n                <p className=\"mb-4\">\n                  Tu puntuación final: <span id=\"final-score\">0</span>\n                </p>\n                <button\n                  onClick={resetGame}\n                  className=\"px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600\"\n                >\n                  Jugar de nuevo\n                </button>\n              </div>\n            </div>\n          </div>\n\n          <div className=\"flex flex-col items-center mt-4\">\n            <div className=\"grid grid-cols-3 gap-2 mb-2\">\n              <button\n                onClick={() => movePiece(-1)}\n                className=\"p-4 bg-gray-200 rounded\"\n              >\n                ←\n              </button>\n              <button\n                onClick={() => dropPiece()}\n                className=\"p-4 bg-gray-200 rounded\"\n              >\n                ↓\n              </button>\n              <button\n                onClick={() => movePiece(1)}\n                className=\"p-4 bg-gray-200 rounded\"\n              >\n                →\n              </button>\n            </div>\n            <button\n              onClick={() => rotatePiece()}\n              className=\"w-full p-4 bg-gray-200 rounded\"\n            >\n              Rotar ↑\n            </button>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n};\n\nexport default Tetris;\n"],"names":["Tetris","canvasRef","useRef","gameStateRef","board","piece","piecePosition","x","y","score","gameOver","dropCounter","dropInterval","lastTime","blockSize","colors","pieces","checkCollision","current","boardWidth","width","boardHeight","height","length","boardX","boardY","movePiece","dir","state","rotatePiece","originalPiece","rows","cols","rotated","Array","from","fill","dropPiece","mergePiece","removeLines","spawnPiece","forEach","row","value","linesRemoved","outer","splice","unshift","Math","max","updateScore","scoreDisplay","document","getElementById","textContent","createPiece","pieceType","floor","random","gameOverDisplay","finalScoreDisplay","style","display","update","time","arguments","undefined","deltaTime","context","getContext","fillStyle","fillRect","strokeStyle","strokeRect","drawBoard","drawPiece","animationFrameId","requestAnimationFrame","useEffect","canvas","handleKeyDown","e","key","window","addEventListener","removeEventListener","cancelAnimationFrame","_jsx","className","children","_jsxs","Card","CardHeader","CardTitle","CardContent","id","ref","onClick","resetGame"],"sourceRoot":""}