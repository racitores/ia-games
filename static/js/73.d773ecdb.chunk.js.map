{"version":3,"file":"static/js/73.d773ecdb.chunk.js","mappings":"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","sources":["apps/4EnRaya.js"],"sourcesContent":["// description: El clásico juego de 4 en Raya con animaciones y efectos visuales\n// categories: Estrategia, Clásicos, Multijugador\nimport React, { useState, useEffect } from \"react\";\nimport {\n  Card,\n  CardContent,\n  CardHeader,\n  CardTitle,\n} from \"../components/ui/card\";\n\nconst ROWS = 6;\nconst COLS = 7;\n\nconst styles = {\n  board: {\n    backgroundColor: \"#0055b3\",\n    borderRadius: \"10px\",\n    padding: \"15px\",\n    display: \"grid\",\n    gridTemplateColumns: `repeat(${COLS}, 1fr)`,\n    gap: \"10px\",\n    boxShadow: \"0 0 10px rgba(0, 0, 0, 0.3)\",\n  },\n  column: {\n    display: \"flex\",\n    flexDirection: \"column\",\n  },\n  cell: {\n    width: \"50px\",\n    height: \"50px\",\n    backgroundColor: \"#f0f0f0\",\n    borderRadius: \"50%\",\n    margin: \"5px\",\n    cursor: \"pointer\",\n    transition: \"background-color 0.3s\",\n  },\n  red: {\n    backgroundColor: \"#ff4136\",\n    animation: \"drop 0.5s\",\n  },\n  yellow: {\n    backgroundColor: \"#ffdc00\",\n    animation: \"drop 0.5s\",\n  },\n  columnSelector: {\n    width: \"100%\",\n    height: \"20px\",\n    backgroundColor: \"transparent\",\n    cursor: \"pointer\",\n    borderRadius: \"5px\",\n    transition: \"background-color 0.3s\",\n  },\n  columnSelectorHover: {\n    backgroundColor: \"rgba(255, 255, 255, 0.3)\",\n  },\n  controls: {\n    marginTop: \"20px\",\n    display: \"flex\",\n    gap: \"10px\",\n  },\n  button: {\n    padding: \"10px 20px\",\n    border: \"none\",\n    borderRadius: \"5px\",\n    backgroundColor: \"#0055b3\",\n    color: \"white\",\n    cursor: \"pointer\",\n    fontSize: \"16px\",\n    transition: \"background-color 0.3s\",\n  },\n  buttonHover: {\n    backgroundColor: \"#003d82\",\n  },\n  status: {\n    fontSize: \"18px\",\n    fontWeight: \"bold\",\n    margin: \"15px 0\",\n    height: \"25px\",\n  },\n  winning: {\n    animation: \"pulse 1s infinite\",\n  },\n};\n\nconst FourInARow = () => {\n  const [gameState, setGameState] = useState(\n    Array(COLS)\n      .fill()\n      .map(() => Array(ROWS).fill(0))\n  );\n  const [currentPlayer, setCurrentPlayer] = useState(1);\n  const [gameActive, setGameActive] = useState(true);\n  const [lastMove, setLastMove] = useState(null);\n  const [winningCells, setWinningCells] = useState([]);\n\n  const makeMove = (col) => {\n    if (!gameActive) return;\n\n    const columnArray = [...gameState[col]];\n    const rowIndex = columnArray.findIndex((cell) => cell === 0);\n\n    if (rowIndex === -1) return;\n\n    const newGameState = gameState.map((column) => [...column]);\n    newGameState[col][rowIndex] = currentPlayer;\n    setGameState(newGameState);\n    setLastMove({ row: rowIndex, col });\n\n    if (checkWin(newGameState, rowIndex, col)) {\n      setGameActive(false);\n      setWinningCells(findWinningCells(newGameState, rowIndex, col));\n      return;\n    }\n\n    if (checkDraw(newGameState)) {\n      setGameActive(false);\n      return;\n    }\n\n    setCurrentPlayer(currentPlayer === 1 ? 2 : 1);\n  };\n\n  const checkWin = (board, row, col) => {\n    const player = board[col][row];\n    let count;\n\n    // Check horizontal\n    count = 1;\n    for (let c = col - 1; c >= 0 && board[c][row] === player; c--) count++;\n    for (let c = col + 1; c < COLS && board[c][row] === player; c++) count++;\n    if (count >= 4) return true;\n\n    // Check vertical\n    count = 1;\n    for (let r = row - 1; r >= 0 && board[col][r] === player; r--) count++;\n    if (count >= 4) return true;\n\n    // Check diagonal (bottom-left to top-right)\n    count = 1;\n    for (\n      let r = row - 1, c = col - 1;\n      r >= 0 && c >= 0 && board[c][r] === player;\n      r--, c--\n    )\n      count++;\n    for (\n      let r = row + 1, c = col + 1;\n      r < ROWS && c < COLS && board[c][r] === player;\n      r++, c++\n    )\n      count++;\n    if (count >= 4) return true;\n\n    // Check diagonal (bottom-right to top-left)\n    count = 1;\n    for (\n      let r = row - 1, c = col + 1;\n      r >= 0 && c < COLS && board[c][r] === player;\n      r--, c++\n    )\n      count++;\n    for (\n      let r = row + 1, c = col - 1;\n      r < ROWS && c >= 0 && board[c][r] === player;\n      r++, c--\n    )\n      count++;\n    if (count >= 4) return true;\n\n    return false;\n  };\n\n  const findWinningCells = (board, row, col) => {\n    const player = board[col][row];\n    const winningCells = [];\n    let count, tempWinningCells;\n\n    // Check horizontal\n    count = 1;\n    tempWinningCells = [{ row, col }];\n    for (let c = col - 1; c >= 0 && board[c][row] === player; c--) {\n      count++;\n      tempWinningCells.push({ row, col: c });\n    }\n    for (let c = col + 1; c < COLS && board[c][row] === player; c++) {\n      count++;\n      tempWinningCells.push({ row, col: c });\n    }\n    if (count >= 4) winningCells.push(...tempWinningCells);\n\n    // Check vertical\n    count = 1;\n    tempWinningCells = [{ row, col }];\n    for (let r = row - 1; r >= 0 && board[col][r] === player; r--) {\n      count++;\n      tempWinningCells.push({ row: r, col });\n    }\n    if (count >= 4) winningCells.push(...tempWinningCells);\n\n    // Check diagonal (bottom-left to top-right)\n    count = 1;\n    tempWinningCells = [{ row, col }];\n    for (\n      let r = row - 1, c = col - 1;\n      r >= 0 && c >= 0 && board[c][r] === player;\n      r--, c--\n    ) {\n      count++;\n      tempWinningCells.push({ row: r, col: c });\n    }\n    for (\n      let r = row + 1, c = col + 1;\n      r < ROWS && c < COLS && board[c][r] === player;\n      r++, c++\n    ) {\n      count++;\n      tempWinningCells.push({ row: r, col: c });\n    }\n    if (count >= 4) winningCells.push(...tempWinningCells);\n\n    // Check diagonal (bottom-right to top-left)\n    count = 1;\n    tempWinningCells = [{ row, col }];\n    for (\n      let r = row - 1, c = col + 1;\n      r >= 0 && c < COLS && board[c][r] === player;\n      r--, c++\n    ) {\n      count++;\n      tempWinningCells.push({ row: r, col: c });\n    }\n    for (\n      let r = row + 1, c = col - 1;\n      r < ROWS && c >= 0 && board[c][r] === player;\n      r++, c--\n    ) {\n      count++;\n      tempWinningCells.push({ row: r, col: c });\n    }\n    if (count >= 4) winningCells.push(...tempWinningCells);\n\n    return winningCells;\n  };\n\n  const checkDraw = (board) => {\n    for (let col = 0; col < COLS; col++) {\n      if (board[col][ROWS - 1] === 0) return false;\n    }\n    return true;\n  };\n\n  const resetGame = () => {\n    setGameState(\n      Array(COLS)\n        .fill()\n        .map(() => Array(ROWS).fill(0))\n    );\n    setCurrentPlayer(1);\n    setGameActive(true);\n    setLastMove(null);\n    setWinningCells([]);\n  };\n\n  const getStatusMessage = () => {\n    if (!gameActive) {\n      if (winningCells.length > 0) {\n        return `¡Jugador ${currentPlayer} (${\n          currentPlayer === 1 ? \"Rojo\" : \"Amarillo\"\n        }) ha ganado!`;\n      }\n      return \"¡Empate!\";\n    }\n    return `Turno del Jugador ${currentPlayer} (${\n      currentPlayer === 1 ? \"Rojo\" : \"Amarillo\"\n    })`;\n  };\n\n  return (\n    <div className=\"w-full max-w-3xl mx-auto p-4\">\n      <Card className=\"mb-4\">\n        <CardHeader className=\"bg-blue-500 text-white\">\n          <CardTitle className=\"text-center text-2xl\">4 en Raya</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div style={styles.status}>{getStatusMessage()}</div>\n\n          <div style={styles.board}>\n            {Array(COLS)\n              .fill()\n              .map((_, col) => (\n                <div key={col} style={styles.column}>\n                  <div\n                    style={styles.columnSelector}\n                    onClick={() => makeMove(col)}\n                  />\n                  {Array(ROWS)\n                    .fill()\n                    .map((_, row) => {\n                      const value = gameState[col][ROWS - 1 - row];\n                      const isWinning = winningCells.some(\n                        (cell) =>\n                          cell.row === ROWS - 1 - row && cell.col === col\n                      );\n\n                      return (\n                        <div\n                          key={`${col}-${row}`}\n                          style={{\n                            ...styles.cell,\n                            ...(value === 1 && styles.red),\n                            ...(value === 2 && styles.yellow),\n                            ...(isWinning && styles.winning),\n                          }}\n                        />\n                      );\n                    })}\n                </div>\n              ))}\n          </div>\n\n          <div style={styles.controls}>\n            <button style={styles.button} onClick={resetGame}>\n              Reiniciar Juego\n            </button>\n          </div>\n        </CardContent>\n      </Card>\n\n      <style>\n        {`\n          @keyframes drop {\n            from {transform: translateY(-300px);}\n            to {transform: translateY(0);}\n          }\n          @keyframes pulse {\n            0% {transform: scale(1);}\n            50% {transform: scale(1.1);}\n            100% {transform: scale(1);}\n          }\n        `}\n      </style>\n    </div>\n  );\n};\n\nexport default FourInARow;\n"],"names":["styles","board","backgroundColor","borderRadius","padding","display","gridTemplateColumns","gap","boxShadow","column","flexDirection","cell","width","height","margin","cursor","transition","red","animation","yellow","columnSelector","columnSelectorHover","controls","marginTop","button","border","color","fontSize","buttonHover","status","fontWeight","winning","FourInARow","gameState","setGameState","useState","Array","fill","map","currentPlayer","setCurrentPlayer","gameActive","setGameActive","lastMove","setLastMove","winningCells","setWinningCells","checkWin","row","col","player","count","c","r","findWinningCells","tempWinningCells","push","checkDraw","ROWS","_jsxs","className","children","Card","_jsx","CardHeader","CardTitle","CardContent","style","length","_","onClick","rowIndex","findIndex","newGameState","makeMove","value","isWinning","some","resetGame"],"sourceRoot":""}