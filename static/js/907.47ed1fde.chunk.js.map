{"version":3,"file":"static/js/907.47ed1fde.chunk.js","mappings":"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","sources":["apps/snakeNokia.js"],"sourcesContent":["// description: El clásico juego de la serpiente con controles táctiles y de teclado\n// categories: Diversión, Clásicos, Arcade\nimport React, { useEffect, useRef, useState } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"../components/ui/card\";\n\nconst SnakeNokia = () => {\n  const canvasRef = useRef(null);\n  const [score, setScore] = useState(0);\n  const [isPaused, setIsPaused] = useState(true);\n  const [isGameOver, setIsGameOver] = useState(false);\n  const [currentDirection, setCurrentDirection] = useState(\"derecha\");\n  const gameStateRef = useRef({\n    snake: [\n      { x: 7, y: 7 },\n      { x: 6, y: 7 },\n      { x: 5, y: 7 },\n    ],\n    food: null,\n    direction: \"right\",\n    nextDirection: \"right\",\n    gameInterval: null,\n    blockSize: 20,\n    width: 15,\n    height: 15,\n    touchStartX: 0,\n    touchStartY: 0,\n    touchEndX: 0,\n    touchEndY: 0,\n    minSwipeDistance: 30,\n  });\n\n  // Inicialización del juego\n  const init = () => {\n    const state = gameStateRef.current;\n    state.snake = [\n      { x: 7, y: 7 },\n      { x: 6, y: 7 },\n      { x: 5, y: 7 },\n    ];\n    state.direction = \"right\";\n    state.nextDirection = \"right\";\n    setScore(0);\n    setIsPaused(true);\n    setIsGameOver(false);\n    setCurrentDirection(\"derecha\");\n    createFood();\n    drawGame();\n  };\n\n  // Crear comida\n  const createFood = () => {\n    const state = gameStateRef.current;\n    state.food = {\n      x: Math.floor(Math.random() * state.width),\n      y: Math.floor(Math.random() * state.height),\n    };\n    // Evitar que la comida aparezca sobre la serpiente\n    for (let segment of state.snake) {\n      if (segment.x === state.food.x && segment.y === state.food.y) {\n        return createFood();\n      }\n    }\n  };\n\n  // Actualizar visualización de dirección\n  const updateDirectionDisplay = (direction) => {\n    let dirText = \"\";\n    switch (direction) {\n      case \"left\":\n        dirText = \"izquierda\";\n        break;\n      case \"right\":\n        dirText = \"derecha\";\n        break;\n      case \"up\":\n        dirText = \"arriba\";\n        break;\n      case \"down\":\n        dirText = \"abajo\";\n        break;\n    }\n    setCurrentDirection(dirText);\n  };\n\n  // Dibujar el juego\n  const drawGame = () => {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext(\"2d\");\n    const state = gameStateRef.current;\n\n    // Limpiar el canvas\n    ctx.fillStyle = \"#ecf0f1\";\n    ctx.fillRect(0, 0, canvas.width, canvas.height);\n\n    // Dibujar la serpiente\n    state.snake.forEach((segment, index) => {\n      ctx.fillStyle = index === 0 ? \"#2ecc71\" : \"#27ae60\";\n      ctx.fillRect(\n        segment.x * state.blockSize,\n        segment.y * state.blockSize,\n        state.blockSize,\n        state.blockSize\n      );\n\n      // Borde del segmento\n      ctx.strokeStyle = \"#1e8449\";\n      ctx.strokeRect(\n        segment.x * state.blockSize,\n        segment.y * state.blockSize,\n        state.blockSize,\n        state.blockSize\n      );\n    });\n\n    // Dibujar la comida\n    ctx.fillStyle = \"#e74c3c\";\n    ctx.fillRect(\n      state.food.x * state.blockSize,\n      state.food.y * state.blockSize,\n      state.blockSize,\n      state.blockSize\n    );\n\n    // Borde de la comida\n    ctx.strokeStyle = \"#c0392b\";\n    ctx.strokeRect(\n      state.food.x * state.blockSize,\n      state.food.y * state.blockSize,\n      state.blockSize,\n      state.blockSize\n    );\n  };\n\n  // Actualizar la lógica del juego\n  const updateGame = () => {\n    const state = gameStateRef.current;\n\n    // Cambiar dirección si es válido\n    if (\n      (state.nextDirection === \"left\" && state.direction !== \"right\") ||\n      (state.nextDirection === \"right\" && state.direction !== \"left\") ||\n      (state.nextDirection === \"up\" && state.direction !== \"down\") ||\n      (state.nextDirection === \"down\" && state.direction !== \"up\")\n    ) {\n      state.direction = state.nextDirection;\n      updateDirectionDisplay(state.direction);\n    }\n\n    // Calcular la nueva posición de la cabeza\n    const head = { x: state.snake[0].x, y: state.snake[0].y };\n    switch (state.direction) {\n      case \"left\":\n        head.x--;\n        break;\n      case \"right\":\n        head.x++;\n        break;\n      case \"up\":\n        head.y--;\n        break;\n      case \"down\":\n        head.y++;\n        break;\n    }\n\n    // Comprobar colisiones con las paredes\n    if (\n      head.x < 0 ||\n      head.x >= state.width ||\n      head.y < 0 ||\n      head.y >= state.height\n    ) {\n      gameOver();\n      return;\n    }\n\n    // Comprobar colisiones con la propia serpiente\n    for (let i = 1; i < state.snake.length; i++) {\n      if (head.x === state.snake[i].x && head.y === state.snake[i].y) {\n        gameOver();\n        return;\n      }\n    }\n\n    // Añadir nueva cabeza\n    state.snake.unshift(head);\n\n    // Comprobar si come la comida\n    if (head.x === state.food.x && head.y === state.food.y) {\n      setScore((prev) => prev + 10);\n      createFood();\n    } else {\n      // Si no come, eliminar el último segmento\n      state.snake.pop();\n    }\n\n    // Actualizar el canvas\n    drawGame();\n  };\n\n  // Finalizar juego\n  const gameOver = () => {\n    setIsGameOver(true);\n    clearInterval(gameStateRef.current.gameInterval);\n  };\n\n  // Iniciar juego\n  const startGame = () => {\n    if (isGameOver) {\n      init();\n    }\n    if (isPaused) {\n      setIsPaused(false);\n      gameStateRef.current.gameInterval = setInterval(updateGame, 200);\n    } else {\n      clearInterval(gameStateRef.current.gameInterval);\n      init();\n      setIsPaused(false);\n      gameStateRef.current.gameInterval = setInterval(updateGame, 200);\n    }\n  };\n\n  // Pausar juego\n  const pauseGame = () => {\n    if (!isPaused && !isGameOver) {\n      clearInterval(gameStateRef.current.gameInterval);\n      setIsPaused(true);\n    } else if (isPaused && !isGameOver) {\n      gameStateRef.current.gameInterval = setInterval(updateGame, 200);\n      setIsPaused(false);\n    }\n  };\n\n  // Manejar deslizamiento táctil\n  const handleTouchStart = (e) => {\n    const state = gameStateRef.current;\n    state.touchStartX = e.touches[0].clientX;\n    state.touchStartY = e.touches[0].clientY;\n  };\n\n  const handleTouchEnd = (e) => {\n    if (isGameOver || isPaused) return;\n\n    const state = gameStateRef.current;\n    state.touchEndX = e.changedTouches[0].clientX;\n    state.touchEndY = e.changedTouches[0].clientY;\n\n    const deltaX = state.touchEndX - state.touchStartX;\n    const deltaY = state.touchEndY - state.touchStartY;\n\n    if (\n      Math.abs(deltaX) < state.minSwipeDistance &&\n      Math.abs(deltaY) < state.minSwipeDistance\n    ) {\n      return;\n    }\n\n    if (Math.abs(deltaX) > Math.abs(deltaY)) {\n      if (deltaX > 0 && state.direction !== \"left\") {\n        state.nextDirection = \"right\";\n      } else if (deltaX < 0 && state.direction !== \"right\") {\n        state.nextDirection = \"left\";\n      }\n    } else {\n      if (deltaY > 0 && state.direction !== \"up\") {\n        state.nextDirection = \"down\";\n      } else if (deltaY < 0 && state.direction !== \"down\") {\n        state.nextDirection = \"up\";\n      }\n    }\n  };\n\n  // Efecto para manejar eventos de teclado\n  useEffect(() => {\n    const handleKeyDown = (event) => {\n      const state = gameStateRef.current;\n      switch (event.key) {\n        case \"ArrowLeft\":\n          if (state.direction !== \"right\") state.nextDirection = \"left\";\n          break;\n        case \"ArrowRight\":\n          if (state.direction !== \"left\") state.nextDirection = \"right\";\n          break;\n        case \"ArrowUp\":\n          if (state.direction !== \"down\") state.nextDirection = \"up\";\n          break;\n        case \"ArrowDown\":\n          if (state.direction !== \"up\") state.nextDirection = \"down\";\n          break;\n        case \" \":\n          pauseGame();\n          break;\n        case \"Enter\":\n          if (isPaused || isGameOver) startGame();\n          break;\n      }\n    };\n\n    window.addEventListener(\"keydown\", handleKeyDown);\n    return () => window.removeEventListener(\"keydown\", handleKeyDown);\n  }, [isPaused, isGameOver]);\n\n  // Efecto para inicializar el juego\n  useEffect(() => {\n    init();\n    return () => {\n      if (gameStateRef.current.gameInterval) {\n        clearInterval(gameStateRef.current.gameInterval);\n      }\n    };\n  }, []);\n\n  return (\n    <div className=\"w-full max-w-3xl mx-auto p-4\">\n      <Card className=\"mb-4\">\n        <CardHeader className=\"bg-blue-500 text-white\">\n          <CardTitle className=\"text-center text-2xl\">\n            Juego de la Serpiente\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"text-center mb-4\">\n            <div className=\"text-xl font-bold\">Puntuación: {score}</div>\n          </div>\n\n          <div\n            className=\"relative mx-auto border-2 border-gray-800 bg-gray-100\"\n            style={{ width: \"300px\", height: \"300px\" }}\n            onTouchStart={handleTouchStart}\n            onTouchEnd={handleTouchEnd}\n            onTouchMove={(e) => e.preventDefault()}\n          >\n            <canvas\n              ref={canvasRef}\n              width={300}\n              height={300}\n              className=\"touch-none\"\n            />\n\n            {isGameOver && (\n              <div className=\"absolute inset-0 flex items-center justify-center bg-black bg-opacity-80 text-white\">\n                <div className=\"text-center p-4\">\n                  <h2 className=\"text-2xl font-bold mb-2\">¡Juego Terminado!</h2>\n                  <p className=\"mb-4\">Tu puntuación final: {score}</p>\n                  <button\n                    onClick={startGame}\n                    className=\"px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600\"\n                  >\n                    Jugar de nuevo\n                  </button>\n                </div>\n              </div>\n            )}\n          </div>\n\n          <div className=\"flex justify-center gap-4 mt-4\">\n            <button\n              onClick={startGame}\n              className=\"px-4 py-2 bg-green-500 text-white rounded hover:bg-green-600\"\n            >\n              {isPaused ? \"Iniciar Juego\" : \"Reiniciar\"}\n            </button>\n            <button\n              onClick={pauseGame}\n              className=\"px-4 py-2 bg-yellow-500 text-white rounded hover:bg-yellow-600\"\n              disabled={isGameOver}\n            >\n              {isPaused ? \"Continuar\" : \"Pausar\"}\n            </button>\n          </div>\n\n          <div className=\"mt-4 p-3 bg-gray-100 rounded text-center\">\n            <p>\n              Desliza el dedo en la pantalla para cambiar la dirección.\n              <br />\n              Dirección actual:{\" \"}\n              <span className=\"font-bold text-blue-500\">\n                {currentDirection}\n              </span>\n            </p>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n};\n\nexport default SnakeNokia;\n"],"names":["SnakeNokia","canvasRef","useRef","score","setScore","useState","isPaused","setIsPaused","isGameOver","setIsGameOver","currentDirection","setCurrentDirection","gameStateRef","snake","x","y","food","direction","nextDirection","gameInterval","blockSize","width","height","touchStartX","touchStartY","touchEndX","touchEndY","minSwipeDistance","init","state","current","createFood","drawGame","Math","floor","random","segment","canvas","ctx","getContext","fillStyle","fillRect","forEach","index","strokeStyle","strokeRect","updateGame","dirText","updateDirectionDisplay","head","gameOver","i","length","unshift","prev","pop","clearInterval","startGame","setInterval","pauseGame","useEffect","handleKeyDown","event","key","window","addEventListener","removeEventListener","_jsx","className","children","_jsxs","Card","CardHeader","CardTitle","CardContent","style","onTouchStart","e","touches","clientX","clientY","onTouchEnd","changedTouches","deltaX","deltaY","abs","onTouchMove","preventDefault","ref","onClick","disabled"],"sourceRoot":""}