{"version":3,"file":"static/js/435.a12ca185.chunk.js","mappings":"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","sources":["apps/batallaDePalabras.js"],"sourcesContent":["// description: Un juego educativo donde los jugadores deben encontrar palabras que empiecen con una letra específica y compartir datos interesantes sobre ellas\n// categories: Educativo, Lenguaje, Escolar\nimport React, { useState, useEffect } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"../components/ui/card\";\n\nconst WordExplorerGame = () => {\n  // Estados para manejar el juego\n  const [gameState, setGameState] = useState(\"setup\"); // setup, playing, results\n  const [currentRound, setCurrentRound] = useState(1);\n  const [totalRounds, setTotalRounds] = useState(3);\n  const [timeLeft, setTimeLeft] = useState(30);\n  const [currentCategory, setCurrentCategory] = useState(\"\");\n  const [currentLetter, setCurrentLetter] = useState(\"\");\n  const [word, setWord] = useState(\"\");\n  const [fact, setFact] = useState(\"\");\n  const [score, setScore] = useState(0);\n  const [answers, setAnswers] = useState([]);\n  const [teams, setTeams] = useState([{ name: \"Equipo 1\", score: 0 }]);\n  const [activeTeam, setActiveTeam] = useState(0);\n  const [timer, setTimer] = useState(null);\n  const [maxTime, setMaxTime] = useState(30);\n\n  // Categorías y letras disponibles\n  const categories = [\n    \"Animales\",\n    \"Países\",\n    \"Comidas\",\n    \"Deportes\",\n    \"Profesiones\",\n    \"Objetos de casa\",\n  ];\n  const letters = \"ABCDEFGHIJLMNOPQRST\".split(\"\");\n\n  // Iniciar una nueva ronda\n  const startNewRound = () => {\n    // Seleccionar categoría y letra al azar\n    const randomCategory =\n      categories[Math.floor(Math.random() * categories.length)];\n    const randomLetter = letters[Math.floor(Math.random() * letters.length)];\n\n    setCurrentCategory(randomCategory);\n    setCurrentLetter(randomLetter);\n    setTimeLeft(maxTime);\n    setWord(\"\");\n    setFact(\"\");\n    setGameState(\"playing\");\n\n    // Iniciar temporizador\n    const interval = setInterval(() => {\n      setTimeLeft((prevTime) => {\n        if (prevTime <= 1) {\n          clearInterval(interval);\n          endRound();\n          return 0;\n        }\n        return prevTime - 1;\n      });\n    }, 1000);\n\n    setTimer(interval);\n  };\n\n  // Finalizar la ronda actual\n  const endRound = () => {\n    if (timer) clearInterval(timer);\n\n    if (currentRound >= totalRounds) {\n      setGameState(\"results\");\n    } else {\n      setGameState(\"setup\");\n      setCurrentRound((prev) => prev + 1);\n    }\n  };\n\n  // Enviar una respuesta\n  const submitAnswer = () => {\n    if (!word.trim() || !fact.trim()) return;\n\n    // Calcular puntos basados en el tiempo restante\n    const timeBonus = Math.floor((timeLeft / maxTime) * 100);\n    const points = 50 + timeBonus;\n\n    // Guardar la respuesta\n    const newAnswer = {\n      word: word.trim(),\n      fact: fact.trim(),\n      timeBonus,\n      points,\n      category: currentCategory,\n      letter: currentLetter,\n    };\n\n    setAnswers((prev) => [...prev, newAnswer]);\n\n    // Actualizar puntuación del equipo\n    const updatedTeams = [...teams];\n    updatedTeams[activeTeam].score += points;\n    setTeams(updatedTeams);\n\n    // Limpiar campos\n    setWord(\"\");\n    setFact(\"\");\n\n    // Cambiar al siguiente equipo si hay más de uno\n    if (teams.length > 1) {\n      setActiveTeam((prev) => (prev + 1) % teams.length);\n    }\n  };\n\n  // Reiniciar el juego\n  const resetGame = () => {\n    setGameState(\"setup\");\n    setCurrentRound(1);\n    setScore(0);\n    setAnswers([]);\n    setTeams(teams.map((team) => ({ ...team, score: 0 })));\n  };\n\n  // Agregar un equipo\n  const addTeam = () => {\n    if (teams.length < 4) {\n      setTeams((prev) => [\n        ...prev,\n        { name: `Equipo ${prev.length + 1}`, score: 0 },\n      ]);\n    }\n  };\n\n  // Limpiar temporizador cuando el componente se desmonte\n  useEffect(() => {\n    return () => {\n      if (timer) clearInterval(timer);\n    };\n  }, [timer]);\n\n  return (\n    <div className=\"w-full max-w-3xl mx-auto p-4\">\n      <Card className=\"mb-4\">\n        <CardHeader className=\"bg-blue-500 text-white\">\n          <CardTitle className=\"text-center text-2xl\">\n            El Explorador de Palabras\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          {gameState === \"setup\" && (\n            <div className=\"space-y-4 p-4\">\n              <h2 className=\"text-xl font-bold text-center mb-6\">\n                Configuración\n              </h2>\n\n              <div className=\"flex justify-between items-center mb-4\">\n                <span className=\"font-medium\">Número de rondas:</span>\n                <div className=\"flex items-center\">\n                  <button\n                    className=\"px-3 py-1 bg-gray-200 rounded-l\"\n                    onClick={() =>\n                      setTotalRounds((prev) => Math.max(1, prev - 1))\n                    }\n                  >\n                    -\n                  </button>\n                  <span className=\"px-4 py-1 bg-gray-100\">{totalRounds}</span>\n                  <button\n                    className=\"px-3 py-1 bg-gray-200 rounded-r\"\n                    onClick={() => setTotalRounds((prev) => prev + 1)}\n                  >\n                    +\n                  </button>\n                </div>\n              </div>\n\n              <div className=\"flex justify-between items-center mb-4\">\n                <span className=\"font-medium\">Tiempo por ronda (seg):</span>\n                <div className=\"flex items-center\">\n                  <button\n                    className=\"px-3 py-1 bg-gray-200 rounded-l\"\n                    onClick={() => setMaxTime((prev) => Math.max(10, prev - 5))}\n                  >\n                    -\n                  </button>\n                  <span className=\"px-4 py-1 bg-gray-100\">{maxTime}</span>\n                  <button\n                    className=\"px-3 py-1 bg-gray-200 rounded-r\"\n                    onClick={() => setMaxTime((prev) => prev + 5)}\n                  >\n                    +\n                  </button>\n                </div>\n              </div>\n\n              <div className=\"mb-6\">\n                <h3 className=\"font-medium mb-2\">Equipos:</h3>\n                {teams.map((team, index) => (\n                  <div key={index} className=\"flex items-center mb-2\">\n                    <input\n                      type=\"text\"\n                      value={team.name}\n                      onChange={(e) => {\n                        const newTeams = [...teams];\n                        newTeams[index].name = e.target.value;\n                        setTeams(newTeams);\n                      }}\n                      className=\"border rounded p-2 flex-grow\"\n                    />\n                    <span className=\"ml-2\">Puntos: {team.score}</span>\n                  </div>\n                ))}\n                {teams.length < 4 && (\n                  <button\n                    onClick={addTeam}\n                    className=\"mt-2 px-4 py-2 bg-blue-500 text-white rounded\"\n                  >\n                    Añadir equipo\n                  </button>\n                )}\n              </div>\n\n              <div className=\"text-center\">\n                <button\n                  onClick={startNewRound}\n                  className=\"px-6 py-3 bg-green-500 text-white rounded-lg font-bold\"\n                >\n                  {currentRound === 1 ? \"¡Empezar juego!\" : \"Siguiente ronda\"}\n                </button>\n              </div>\n            </div>\n          )}\n\n          {gameState === \"playing\" && (\n            <div className=\"space-y-4 p-4\">\n              <div className=\"flex justify-between mb-2\">\n                <span>\n                  Ronda: {currentRound}/{totalRounds}\n                </span>\n                <span className=\"font-bold\">\n                  Turno: {teams[activeTeam].name}\n                </span>\n              </div>\n\n              <div className=\"bg-blue-100 p-4 rounded-lg mb-4 text-center\">\n                <h2 className=\"text-xl mb-2\">\n                  Categoría: <strong>{currentCategory}</strong>\n                </h2>\n                <h2 className=\"text-2xl\">\n                  Letra:{\" \"}\n                  <strong className=\"text-3xl text-blue-600\">\n                    {currentLetter}\n                  </strong>\n                </h2>\n              </div>\n\n              <div className=\"flex justify-center mb-4\">\n                <div className=\"text-center p-2 bg-red-100 rounded-full w-16 h-16 flex items-center justify-center\">\n                  <span className=\"text-2xl font-bold\">{timeLeft}</span>\n                </div>\n              </div>\n\n              <div className=\"space-y-3\">\n                <div>\n                  <label className=\"block text-sm font-medium mb-1\">\n                    Palabra que empieza con '{currentLetter}':\n                  </label>\n                  <input\n                    type=\"text\"\n                    value={word}\n                    onChange={(e) => setWord(e.target.value)}\n                    className=\"w-full border rounded p-2\"\n                    placeholder={`Escribe un ${currentCategory.toLowerCase()} con ${currentLetter}...`}\n                  />\n                </div>\n\n                <div>\n                  <label className=\"block text-sm font-medium mb-1\">\n                    Dato interesante:\n                  </label>\n                  <textarea\n                    value={fact}\n                    onChange={(e) => setFact(e.target.value)}\n                    className=\"w-full border rounded p-2\"\n                    placeholder=\"Escribe un dato interesante sobre esta palabra...\"\n                    rows=\"3\"\n                  />\n                </div>\n\n                <div className=\"flex space-x-4 justify-center pt-2\">\n                  <button\n                    onClick={submitAnswer}\n                    className=\"px-4 py-2 bg-green-500 text-white rounded\"\n                    disabled={!word.trim() || !fact.trim()}\n                  >\n                    Enviar respuesta\n                  </button>\n\n                  <button\n                    onClick={endRound}\n                    className=\"px-4 py-2 bg-red-500 text-white rounded\"\n                  >\n                    Terminar ronda\n                  </button>\n                </div>\n              </div>\n\n              <div className=\"mt-4\">\n                <h3 className=\"font-medium mb-2\">Respuestas en esta ronda:</h3>\n                <ul className=\"space-y-2\">\n                  {answers\n                    .filter(\n                      (a) =>\n                        a.category === currentCategory &&\n                        a.letter === currentLetter\n                    )\n                    .map((answer, i) => (\n                      <li key={i} className=\"border-l-4 border-blue-500 pl-2\">\n                        <strong>{answer.word}</strong> - {answer.fact}\n                        <div className=\"text-sm text-gray-600\">\n                          Bonus por tiempo: +{answer.timeBonus} pts | Total:{\" \"}\n                          {answer.points} pts\n                        </div>\n                      </li>\n                    ))}\n                </ul>\n              </div>\n            </div>\n          )}\n\n          {gameState === \"results\" && (\n            <div className=\"space-y-4 p-4\">\n              <h2 className=\"text-xl font-bold text-center mb-6\">\n                ¡Fin del juego!\n              </h2>\n\n              <div className=\"mb-6\">\n                <h3 className=\"font-medium mb-2\">Puntuación final:</h3>\n                {teams\n                  .sort((a, b) => b.score - a.score)\n                  .map((team, index) => (\n                    <div\n                      key={index}\n                      className={`p-2 mb-2 rounded ${\n                        index === 0\n                          ? \"bg-yellow-100 border-l-4 border-yellow-400\"\n                          : \"\"\n                      }`}\n                    >\n                      {index === 0 && (\n                        <span className=\"text-yellow-700 font-bold\">\n                          🏆 GANADOR:{\" \"}\n                        </span>\n                      )}\n                      <span className=\"font-medium\">{team.name}</span>:{\" \"}\n                      {team.score} puntos\n                    </div>\n                  ))}\n              </div>\n\n              <div className=\"mb-6\">\n                <h3 className=\"font-medium mb-2\">Todas las respuestas:</h3>\n                {categories\n                  .filter((cat) => answers.some((a) => a.category === cat))\n                  .map((category) => (\n                    <div key={category} className=\"mb-4\">\n                      <h4 className=\"text-blue-600 mb-1\">{category}:</h4>\n                      <ul className=\"pl-4\">\n                        {answers\n                          .filter((a) => a.category === category)\n                          .map((answer, i) => (\n                            <li key={i} className=\"mb-1\">\n                              <strong>{answer.word}</strong> ({answer.letter}) -{\" \"}\n                              {answer.fact} ({answer.points} pts)\n                            </li>\n                          ))}\n                      </ul>\n                    </div>\n                  ))}\n              </div>\n\n              <div className=\"text-center\">\n                <button\n                  onClick={resetGame}\n                  className=\"px-6 py-3 bg-blue-500 text-white rounded-lg font-bold\"\n                >\n                  Jugar de nuevo\n                </button>\n              </div>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n};\n\nexport default WordExplorerGame;\n"],"names":["WordExplorerGame","gameState","setGameState","useState","currentRound","setCurrentRound","totalRounds","setTotalRounds","timeLeft","setTimeLeft","currentCategory","setCurrentCategory","currentLetter","setCurrentLetter","word","setWord","fact","setFact","score","setScore","answers","setAnswers","teams","setTeams","name","activeTeam","setActiveTeam","timer","setTimer","maxTime","setMaxTime","categories","letters","split","endRound","clearInterval","prev","useEffect","_jsx","className","children","_jsxs","Card","CardHeader","CardTitle","CardContent","onClick","Math","max","map","team","index","type","value","onChange","e","newTeams","target","length","addTeam","startNewRound","randomCategory","floor","random","randomLetter","interval","setInterval","prevTime","placeholder","toLowerCase","rows","submitAnswer","trim","timeBonus","points","newAnswer","category","letter","updatedTeams","disabled","filter","a","answer","i","sort","b","cat","some","resetGame"],"sourceRoot":""}